
PhotoresistorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000199  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  000014e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 00 	call	0x120	; 0x120 <main>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADCInitialisation>:

int map(int receivedValue, int inMin, int inMax, int outMin, int outMax){
	return (receivedValue - inMin) * (outMax - outMin)/(inMax - inMin) + outMin;
}

void ADCInitialisation(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0;		//sets ADC port as input, 0 was for output
  74:	8a e3       	ldi	r24, 0x3A	; 58
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	10 82       	st	Z, r1
	
	//REFS1:0 = 01;	ADMUX CU REFS1:0 = 01 : reference voltage is AVCC (pin 30)  
	
	//alternative fancy la ce am scris in ultimele 3 randuri de mai sus:
	
	ADCSRA = 0;
  7c:	86 e2       	ldi	r24, 0x26	; 38
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	10 82       	st	Z, r1
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
  84:	86 e2       	ldi	r24, 0x26	; 38
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	26 e8       	ldi	r18, 0x86	; 134
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
//	ADMUX = 0;
//	ADMUX |= (1<<REFS0);
}
  8e:	00 00       	nop
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <getLightLevel>:

uint16_t getLightLevel(uint8_t channel){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <getLightLevel+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <getLightLevel+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t adc_hi;
	uint8_t adc_lo;
	uint16_t result = 0;
  a6:	1a 82       	std	Y+2, r1	; 0x02
  a8:	19 82       	std	Y+1, r1	; 0x01
	//setez canalul de pe care sa citesc
	ADMUX = (1 << REFS0) | (channel & 0x1f);		//compar channel-ul cu 00011111 ca sa ma asigur ca iau bitii corecti din channel
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2d 81       	ldd	r18, Y+5	; 0x05
  b0:	2f 71       	andi	r18, 0x1F	; 31
  b2:	20 64       	ori	r18, 0x40	; 64
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
						
	ADCSRA |= (1<<ADSC);			//: ADC start conversion, alternativa la ADSC = 1;
  b8:	86 e2       	ldi	r24, 0x26	; 38
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	26 e2       	ldi	r18, 0x26	; 38
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	20 64       	ori	r18, 0x40	; 64
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	
	while(ADCSRA & (1<<ADSC));		//ADSC devine 0 la finalul conversiei, desi putem folosi si ca ADIF sa fie 1 (sa se intrerupa conversia)
  ca:	00 00       	nop
  cc:	86 e2       	ldi	r24, 0x26	; 38
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	80 74       	andi	r24, 0x40	; 64
  da:	99 27       	eor	r25, r25
  dc:	89 2b       	or	r24, r25
  de:	b1 f7       	brne	.-20     	; 0xcc <getLightLevel+0x36>
	
	//_delay_ms(10);
	adc_lo = ADCL;
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	8b 83       	std	Y+3, r24	; 0x03
	adc_hi = ADCH;
  ea:	85 e2       	ldi	r24, 0x25	; 37
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	8c 83       	std	Y+4, r24	; 0x04
	result = ((uint16_t)adc_hi << 8) | adc_lo;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	38 2f       	mov	r19, r24
  fc:	22 27       	eor	r18, r18
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	82 2b       	or	r24, r18
 106:	93 2b       	or	r25, r19
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
	return(result);
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	28 97       	sbiw	r28, 0x08	; 8
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
//	printf("U ok?");
	uint8_t channelLeft = 0x00;
 134:	19 82       	std	Y+1, r1	; 0x01
	uint8_t channelRight = 0x01;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t lightLevelLeft;
	uint16_t lightLevelRight;
    ADCInitialisation();
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <ADCInitialisation>
    while (1) 
    {
		channelLeft = 0x00;
 13e:	19 82       	std	Y+1, r1	; 0x01
		channelRight = 0x01;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8a 83       	std	Y+2, r24	; 0x02
		
		lightLevelLeft = getLightLevel(channelLeft);
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	0e 94 4b 00 	call	0x96	; 0x96 <getLightLevel>
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	8b 83       	std	Y+3, r24	; 0x03
		lightLevelRight = getLightLevel(channelRight);
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	0e 94 4b 00 	call	0x96	; 0x96 <getLightLevel>
 154:	9e 83       	std	Y+6, r25	; 0x06
 156:	8d 83       	std	Y+5, r24	; 0x05
		
		
		int i=5;
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	98 87       	std	Y+8, r25	; 0x08
 15e:	8f 83       	std	Y+7, r24	; 0x07
		/*printf("Left: %d   -   Right: %d\n", lightLevelLeft, lightLevelRight);*/
    }
 160:	ee cf       	rjmp	.-36     	; 0x13e <main+0x1e>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
