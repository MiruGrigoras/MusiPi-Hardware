
PhotoresistorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071a  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 00 	call	0x120	; 0x120 <main>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADCInitialisation>:

typedef enum {true, false} bool;

//https://www.electronicwings.com/avr-atmega/atmega1632-adc

void ADCInitialisation(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0;		//sets ADC port as input, 0 was for output
  74:	8a e3       	ldi	r24, 0x3A	; 58
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	10 82       	st	Z, r1
	
	//REFS1:0 = 01;	ADMUX CU REFS1:0 = 01 : reference voltage is AVCC (pin 30)  
	
	//alternative fancy la ce am scris in ultimele 3 randuri de mai sus:
	
	ADCSRA = 0;
  7c:	86 e2       	ldi	r24, 0x26	; 38
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	10 82       	st	Z, r1
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
  84:	86 e2       	ldi	r24, 0x26	; 38
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	26 e8       	ldi	r18, 0x86	; 134
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
//	ADMUX = 0;
//	ADMUX |= (1<<REFS0);
}
  8e:	00 00       	nop
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <getLightLevel>:

uint16_t getLightLevel(uint8_t channel){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <getLightLevel+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <getLightLevel+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t adc_hi;
	uint8_t adc_lo;
	uint16_t result = 0;
  a6:	1a 82       	std	Y+2, r1	; 0x02
  a8:	19 82       	std	Y+1, r1	; 0x01
	//setez canalul de pe care sa citesc
	ADMUX = (1 << REFS0) | (channel & 0x1f);		//compar channel-ul cu 00011111 ca sa ma asigur ca iau bitii corecti din channel
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2d 81       	ldd	r18, Y+5	; 0x05
  b0:	2f 71       	andi	r18, 0x1F	; 31
  b2:	20 64       	ori	r18, 0x40	; 64
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
						
	ADCSRA |= (1<<ADSC);			//: ADC start conversion, alternativa la ADSC = 1;
  b8:	86 e2       	ldi	r24, 0x26	; 38
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	26 e2       	ldi	r18, 0x26	; 38
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	20 64       	ori	r18, 0x40	; 64
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	
	while(ADCSRA & (1<<ADSC));		//ADSC devine 0 la finalul conversiei, desi putem folosi si ca ADIF sa fie 1 (sa se intrerupa conversia)
  ca:	00 00       	nop
  cc:	86 e2       	ldi	r24, 0x26	; 38
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	80 74       	andi	r24, 0x40	; 64
  da:	99 27       	eor	r25, r25
  dc:	89 2b       	or	r24, r25
  de:	b1 f7       	brne	.-20     	; 0xcc <getLightLevel+0x36>
	
	//_delay_ms(10);
	adc_lo = ADCL;
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	8b 83       	std	Y+3, r24	; 0x03
	adc_hi = ADCH;
  ea:	85 e2       	ldi	r24, 0x25	; 37
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	8c 83       	std	Y+4, r24	; 0x04
	result = ((uint16_t)adc_hi << 8) | adc_lo;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	38 2f       	mov	r19, r24
  fc:	22 27       	eor	r18, r18
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	82 2b       	or	r24, r18
 106:	93 2b       	or	r25, r19
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
	return(result);
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2e 97       	sbiw	r28, 0x0e	; 14
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
	uint8_t channelLeft = 0x00;
 134:	19 86       	std	Y+9, r1	; 0x09
	uint8_t channelRight = 0x01;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	8a 87       	std	Y+10, r24	; 0x0a
	uint16_t lightLevelLeft = 0;
 13a:	1c 86       	std	Y+12, r1	; 0x0c
 13c:	1b 86       	std	Y+11, r1	; 0x0b
	uint16_t oldLightLevelLeft = 0;
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
	uint16_t lightLevelRight = 0;
 142:	1e 86       	std	Y+14, r1	; 0x0e
 144:	1d 86       	std	Y+13, r1	; 0x0d
    uint16_t oldLightLevelRight = 0;
 146:	1c 82       	std	Y+4, r1	; 0x04
 148:	1b 82       	std	Y+3, r1	; 0x03
	bool  changeLeft = false, changeRight = false;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	8d 83       	std	Y+5, r24	; 0x05
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t direction = 0, oldDirection = 0; // 1 for left -> right; 2 for right -> left
 152:	1f 82       	std	Y+7, r1	; 0x07
 154:	18 86       	std	Y+8, r1	; 0x08
	ADCInitialisation();
 156:	0e 94 36 00 	call	0x6c	; 0x6c <ADCInitialisation>
    while (1) 
    {
		channelLeft = 0x00;
 15a:	19 86       	std	Y+9, r1	; 0x09
		channelRight = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8a 87       	std	Y+10, r24	; 0x0a
		
		lightLevelLeft = getLightLevel(channelLeft);
 160:	89 85       	ldd	r24, Y+9	; 0x09
 162:	0e 94 4b 00 	call	0x96	; 0x96 <getLightLevel>
 166:	9c 87       	std	Y+12, r25	; 0x0c
 168:	8b 87       	std	Y+11, r24	; 0x0b
		lightLevelRight = getLightLevel(channelRight);
 16a:	8a 85       	ldd	r24, Y+10	; 0x0a
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <getLightLevel>
 170:	9e 87       	std	Y+14, r25	; 0x0e
 172:	8d 87       	std	Y+13, r24	; 0x0d
		
		if(abs(lightLevelLeft - oldLightLevelLeft) >= 150 && oldLightLevelLeft != 0)
 174:	2b 85       	ldd	r18, Y+11	; 0x0b
 176:	3c 85       	ldd	r19, Y+12	; 0x0c
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	a9 01       	movw	r20, r18
 17e:	48 1b       	sub	r20, r24
 180:	59 0b       	sbc	r21, r25
 182:	ca 01       	movw	r24, r20
 184:	99 23       	and	r25, r25
 186:	1c f4       	brge	.+6      	; 0x18e <main+0x6e>
 188:	91 95       	neg	r25
 18a:	81 95       	neg	r24
 18c:	91 09       	sbc	r25, r1
 18e:	86 39       	cpi	r24, 0x96	; 150
 190:	91 05       	cpc	r25, r1
 192:	2c f0       	brlt	.+10     	; 0x19e <main+0x7e>
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	89 2b       	or	r24, r25
 19a:	09 f0       	breq	.+2      	; 0x19e <main+0x7e>
			changeLeft = true;
 19c:	1d 82       	std	Y+5, r1	; 0x05
		if(abs(lightLevelRight - oldLightLevelRight) >= 150 && oldLightLevelRight != 0)
 19e:	2d 85       	ldd	r18, Y+13	; 0x0d
 1a0:	3e 85       	ldd	r19, Y+14	; 0x0e
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	a9 01       	movw	r20, r18
 1a8:	48 1b       	sub	r20, r24
 1aa:	59 0b       	sbc	r21, r25
 1ac:	ca 01       	movw	r24, r20
 1ae:	99 23       	and	r25, r25
 1b0:	1c f4       	brge	.+6      	; 0x1b8 <main+0x98>
 1b2:	91 95       	neg	r25
 1b4:	81 95       	neg	r24
 1b6:	91 09       	sbc	r25, r1
 1b8:	86 39       	cpi	r24, 0x96	; 150
 1ba:	91 05       	cpc	r25, r1
 1bc:	2c f0       	brlt	.+10     	; 0x1c8 <main+0xa8>
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	9c 81       	ldd	r25, Y+4	; 0x04
 1c2:	89 2b       	or	r24, r25
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <main+0xa8>
			changeRight = true;
 1c6:	1e 82       	std	Y+6, r1	; 0x06
			
		if(changeLeft == true && changeRight == false){
 1c8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ca:	88 23       	and	r24, r24
 1cc:	41 f4       	brne	.+16     	; 0x1de <main+0xbe>
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <main+0xbe>
			direction = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	8f 83       	std	Y+7, r24	; 0x07
			changeLeft = false;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	8d 83       	std	Y+5, r24	; 0x05
 1dc:	16 c0       	rjmp	.+44     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		}
		else if(changeLeft == false && changeRight == true){
 1de:	8d 81       	ldd	r24, Y+5	; 0x05
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	41 f4       	brne	.+16     	; 0x1f4 <main+0xd4>
 1e4:	8e 81       	ldd	r24, Y+6	; 0x06
 1e6:	88 23       	and	r24, r24
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <main+0xd4>
			direction = 2;
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	8f 83       	std	Y+7, r24	; 0x07
			changeRight = false;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	8e 83       	std	Y+6, r24	; 0x06
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		}
		else if(changeLeft == true && changeRight == true){
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	88 23       	and	r24, r24
 1f8:	41 f4       	brne	.+16     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1fa:	8e 81       	ldd	r24, Y+6	; 0x06
 1fc:	88 23       	and	r24, r24
 1fe:	29 f4       	brne	.+10     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
			direction = 0;
 200:	1f 82       	std	Y+7, r1	; 0x07
			changeLeft = changeRight = false;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	8e 83       	std	Y+6, r24	; 0x06
 206:	8e 81       	ldd	r24, Y+6	; 0x06
 208:	8d 83       	std	Y+5, r24	; 0x05
		}
		
		if(direction != oldDirection && direction != 0)
 20a:	9f 81       	ldd	r25, Y+7	; 0x07
 20c:	88 85       	ldd	r24, Y+8	; 0x08
 20e:	98 17       	cp	r25, r24
 210:	39 f0       	breq	.+14     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 212:	8f 81       	ldd	r24, Y+7	; 0x07
 214:	88 23       	and	r24, r24
 216:	21 f0       	breq	.+8      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
			//send response to Raspi for things have changed
			
		oldLightLevelLeft = lightLevelLeft;
 218:	8b 85       	ldd	r24, Y+11	; 0x0b
 21a:	9c 85       	ldd	r25, Y+12	; 0x0c
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
		oldLightLevelRight = lightLevelRight;
 220:	8d 85       	ldd	r24, Y+13	; 0x0d
 222:	9e 85       	ldd	r25, Y+14	; 0x0e
 224:	9c 83       	std	Y+4, r25	; 0x04
 226:	8b 83       	std	Y+3, r24	; 0x03
		oldDirection = direction;
 228:	8f 81       	ldd	r24, Y+7	; 0x07
 22a:	88 87       	std	Y+8, r24	; 0x08
    }
 22c:	96 cf       	rjmp	.-212    	; 0x15a <main+0x3a>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
