
ATMegaSerialTransmitterTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000640  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000179  00000000  00000000  00000e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
#include <stdio.h>
#include <util/delay.h>
#define BAUD 115200
#define MYUBRR 5

void USART_Init( unsigned int myubrr ){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <USART_Init+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
	//Set baud rate
	UCSRC = 0;
  7a:	80 e4       	ldi	r24, 0x40	; 64
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	fc 01       	movw	r30, r24
  80:	10 82       	st	Z, r1
	UBRRH = (unsigned char) (myubrr>>8);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	29 81       	ldd	r18, Y+1	; 0x01
  88:	3a 81       	ldd	r19, Y+2	; 0x02
  8a:	23 2f       	mov	r18, r19
  8c:	33 27       	eor	r19, r19
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	UBRRL = (unsigned char) myubrr;
  92:	89 e2       	ldi	r24, 0x29	; 41
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	29 81       	ldd	r18, Y+1	; 0x01
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	
	//Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  9c:	8a e2       	ldi	r24, 0x2A	; 42
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	28 e1       	ldi	r18, 0x18	; 24
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	
	/* Set frame format: 8 bits data, -no- 2stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	26 e8       	ldi	r18, 0x86	; 134
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	00 00       	nop
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  c8:	00 00       	nop
  ca:	8b e2       	ldi	r24, 0x2B	; 43
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	80 81       	ld	r24, Z
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	80 72       	andi	r24, 0x20	; 32
  d8:	99 27       	eor	r25, r25
  da:	89 2b       	or	r24, r25
  dc:	b1 f3       	breq	.-20     	; 0xca <USART_Transmit+0xe>
	/* Put data into buffer, sends the data */
	UDR = data;
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
}
  e8:	00 00       	nop
  ea:	0f 90       	pop	r0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <USART_Receive>:

unsigned char USART_Receive()
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
  fa:	00 00       	nop
  fc:	8b e2       	ldi	r24, 0x2B	; 43
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
 104:	88 23       	and	r24, r24
 106:	d4 f7       	brge	.-12     	; 0xfc <USART_Receive+0xa>
	return(UDR);		/* Return the byte */
 108:	8c e2       	ldi	r24, 0x2C	; 44
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <main>:

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	char c = 'a', x;
 120:	81 e6       	ldi	r24, 0x61	; 97
 122:	89 83       	std	Y+1, r24	; 0x01
	USART_Init(MYUBRR);
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
    /* Replace with your application code */
    while (1) 
    {
		
		/*USART_Transmit('B');*/
		x = USART_Receive();
 12c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Receive>
 130:	8a 83       	std	Y+2, r24	; 0x02
		x = x + 5;
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	8b 5f       	subi	r24, 0xFB	; 251
 136:	8a 83       	std	Y+2, r24	; 0x02
		USART_Transmit(++x);
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	8a 83       	std	Y+2, r24	; 0x02
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
    }
 144:	f3 cf       	rjmp	.-26     	; 0x12c <main+0x16>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
